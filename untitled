alert(tf.getBackend());
//webkitURL is deprecated but nevertheless
URL = window.URL || window.webkitURL;
            tizen.power.request('SCREEN','SCREEN_NORMAL');
            tizen.power.request('CPU','CPU_AWAKE');
var client = new Paho.MQTT.Client('192.168.1.170', 3000, "watch_" + parseInt(Math.random() * 100, 10));
client.onMessageArrived = onMessageArrived;

// connect the client
client.connect({onSuccess:onConnect});

function onConnect() {
    // Once a connection has been made, make a subscription and send a message.
    console.log("onConnect");
    client.subscribe("watch1/ack");
    client.subscribe("watch1/start");
    client.subscribe("watch1/kill");
    client.subscribe("watch1/c_audiodata");
    client.subscribe("watch1/listen");
    var message = new Paho.MQTT.Message("Watch ready!");
    message.destinationName = "watch1/connect";
    client.send(message);
  }

var lock = 0, input_word = "unknown", output_word = "unknown";
var gumStream; 						//stream from getUserMedia()
var recorder;
var rec						//Recorder.js object
var input; 							//MediaStreamAudioSourceNode we'll be recording
let init;
// shim for AudioContext when it's not avb. 
var AudioContext = window.AudioContext || window.webkitAudioContext;
var audioContext; //audio context to help us record
var dataa;
function startRecording() {
    //alert("recordButton clicked");
    var constraints = { audio: true, video: false }
    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
        //alert("getUserMedia() success, stream created, initializing Recorder.js ...");
        audioContext = new AudioContext();
        gumStream = stream;
        input = audioContext.createMediaStreamSource(stream);
        rec = new Recorder(input, { numChannels: 2 });
        rec.record();
        //alert("Recording started");

    });
}

function stopRecording() {
    //alert("stopButton clicked");
    rec.stop();
    gumStream.getAudioTracks()[0].stop();
    rec.exportWAV(createDownloadLink);
    rec.clear();
}

function createDownloadLink(blob) {
    //alert('In here now');
    //name of .wav file to use during upload and download (without extendion)
    var filename = new Date().toISOString();

    var fd = new FormData();
    fd.append("audio_data", blob, filename);
    //alert('Just before ajax');
    var fd = new FormData();
    fd.append("audio_data", blob, filename);
    $.ajax({
        type: 'POST',
        url: 'http://192.168.1.170:5555/audiodata',
        data: fd,
        processData: false,
        contentType: false
    }).done(function (data) {
        //alert(data);
    });
    //alert('Sent message to server');
}

function onMessageArrived(message){
	var msg = JSON.parse(message.payloadString);
	
    if(message.destinationName == 'watch1/start'){
    	            		if(msg.test_type == 'baseline'){
    	            		var FREQUENCY = msg.frequency;
            			alert('Baseline Run!');
                        setInterval(function(){
                        	  tizen.systeminfo.getPropertyValue('BATTERY',function(battery){
//                        		  console.log(properties);
                        		  tizen.systeminfo.getPropertyValue('CPU',function(cpu){
                        			  init = new Date();
                        			  time = new Date().getTime();
                        			  m_battery = Object.assign(battery);
                        			  m_cpu = Object.assign(cpu);
                        			  var message = new Paho.MQTT.Message(JSON.stringify({
                        				  hrm:0,
                        				  time:time,
                        				  battery:battery,
                        				  cpuLoad:cpu,
                        				  totalMemory:tizen.systeminfo.getTotalMemory(),
                        				  av_Mem:tizen.systeminfo.getAvailableMemory()
                        				  }));
                                      message.destinationName = "watch1/finaldata";
                                      client.send(message);
                                      console.log('Message sent');
                        		  });
                        		  
                        	  });            	  
                        	         	  
                          },FREQUENCY); 
            		}
        //    init = new Date();
          //          startRecording();
           // var message = new Paho.MQTT.Message("Recorder ready!");
            //message.destinationName = "watch1/readytolisten";

            //client.send(message);
            //setTimeout(()=>{
              //  stopRecording();
            //},13000);
        //setInterval(()=>{
          //          init = new Date();
            //startRecording();
            //var message = new Paho.MQTT.Message("Recorder ready!");
            //message.destinationName = "watch1/readytolisten";

            //client.send(message);
            //setTimeout(()=>{
              //  stopRecording();
            //},13000);
        //},30000);
    } else if(message.destinationName == 'watch1/c_audiodata'){
    	//alert('Received a message');
    	//alert(message);
        var msg = JSON.parse(message.payloadString);
        output_word = msg.word;
        tizen.systeminfo.getPropertyValue('BATTERY', function (battery) {
            tizen.systeminfo.getPropertyValue('CPU', function (cpu) {
                var message2 = new Paho.MQTT.Message(JSON.stringify({
                    input_word: input_word,
                    output_word: output_word,
                    predic_time: new Date() - init,
                    battery: battery,
                    cpuLoad: cpu,
                    totalMemory: tizen.systeminfo.getTotalMemory(),
                    av_Mem: tizen.systeminfo.getAvailableMemory()
                }));
                message2.destinationName = "watch1/audiodata";
                client.send(message2);

                //alert('Message sent');
            });

        });
    } else if( message.destinationName == 'watch1/listen' && lock == 0){
    		lock = 1;
    		//alert('Received to start');
    		var msg = JSON.parse(message.payloadString);
    		input_word = msg.word;
    		init = new Date();
    		var calc = new Date();
            startRecording();
            alert(new Date() - calc);
            var audiocapture = new Date() - calc;
            var message = new Paho.MQTT.Message("Recorder ready! Audio capture:"+audiocapture);
            message.destinationName = "watch1/readytolisten";

            client.send(message);
            setTimeout(()=>{
                stopRecording();
                lock = 0;
            },13000);
    } else if(message.destinationName == "watch1/kill") {
      	//lightSensor.unsetChangeListener();
      	tizen.application.getCurrentApplication().exit();
    }
}